geom_hline(aes(yintercept = var(ndf$residuals_1), color="Variance"), linetype="dashed",
size=1) +
scale_color_manual(name = "Statistics", values = c(Variance = "red"))
vgm_4dir_resid = variogram(g_trend,alpha=c(0,45,90,135),tol.hor=22.5,
cutoff=30, width=15)
plot(vgm_4dir_resid)
ggplot(vgm_4dir_resid,aes(x=dist,y=gamma,col=factor(dir.hor),
shape=factor(dir.hor))) + geom_point(size=2) + geom_line() +
labs(x="Distancia [m]",y="Gamma", title = "Semivariograma",
subtitle="Semivariograma direccional residual",
col="atzimut",shape='') +
geom_hline(aes(yintercept = var(ndf$residuals_1), color="Variance"),
linetype="dashed",size=1) +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
map.vgm.resid = variogram(g_trend, width=15, cutoff=30,map=TRUE)
plot(map.vgm.resid)
#Residual variogram map with ggplot
ggplot(data.frame(map.vgm.resid),aes(x=map.dx,y=map.dy,fill=map.Valor)) +
geom_raster() +
scale_fill_gradientn(colours= topo.colors(10)) +
labs(x="E-W",y="N-S", title = "Variogram Map",
subtitle="Raw Data - Omnidirectional Residual Semivariogram",
fill="semivariance")+
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
#Residual variogram map with ggplot
ggplot(data.frame(map.vgm.resid),aes(x=map.dx,y=map.dy,fill=map.Valor)) +
geom_raster() +
scale_fill_gradientn(colours= topo.colors(10)) +
labs(x="Este-Oeste",y="Norte-Sur", title = "Mapa de Variograma",
subtitle="Semivariograma residual omnidireccional",
fill="semivariance")+
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
#Residual variogram map with ggplot
ggplot(data.frame(map.vgm.resid),aes(x=map.dx,y=map.dy,fill=map.Valor)) +
geom_raster() +
scale_fill_gradientn(colours= topo.colors(10)) +
labs(x="Este-Oeste",y="Norte-Sur", title = "Mapa de Variograma",
subtitle="Semivariograma residual omnidireccional",
fill="semivariancia")+
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
# Esférico
vgm_residual.fit_sph = fit.variogram(vgm_Residuals,
model = vgm(0.1,"Sph",100,0.5))
vgm_residual.fit_sph
plot(vgm_Residuals, vgm_residual.fit_sph)
# Exponencial
vgm_residual.fit_exp = fit.variogram(vgm_Residuals,
model = vgm(0.1,"Exp",100,0.5))
vgm_residual.fit_exp
plot(vgm_Residuals, vgm_residual.fit_exp)
# Gaussiano
vgm_residual.fit_gau = fit.variogram(vgm_Residuals,
model = vgm(0.1,"Gau",100,0.5))
vgm_residual.fit_gau2 = vgm(psill=0.17,model="Gau",range=40,nugget=0)
plot(vgm_Residuals, vgm_residual.fit_gau2)
# Bessel
vgm_residual.fit_bes = fit.variogram(vgm_Residuals,
model = vgm(0.1,"Bes",100,0.5))
vgm_residual.fit_bes
plot(vgm_Residuals, vgm_residual.fit_bes)
fit.variogram(vgm_Residuals, vgm(c("Exp", "Bes", "Sph")))
model_shp = variogramLine(vgm_residual.fit_sph, maxdist = max(vgm_Residuals$dist))
head(model_shp)
model_exp = variogramLine(vgm_residual.fit_exp, maxdist = max(vgm_Residuals$dist))
head(model_exp)
model_gau2 = variogramLine(vgm_residual.fit_gau2, maxdist = max(vgm_Residuals$dist))
head(model_gau2)
ggplot(vgm_Residuals, aes(x = dist, y = gamma)) +
geom_point(size=2) +
geom_line(data = model_shp, linetype="solid", aes(color= "Spherical"), size=0.8)+
geom_line(data = model_exp, linetype="dashed", aes(color= "Exponential"), size=0.8)+
geom_line(data = model_gau2, linetype="twodash", aes(color= "Gaussian"), size=0.8)+
labs(x="Distancia [m]",y="Gamma", title = "Modelo Semivariograma ",
subtitle="Modelo esférico, exponencial y gaussiano ajustado en el semivariograma residual omnidireccional",
col="Model",shape='')+
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black") + scale_color_manual(name = "Theoretical Model",
values = c(Spherical= "blue", Exponential= "Red",Gaussian="green" )))
ggplot(vgm_Residuals, aes(x = dist, y = gamma)) +
geom_point(size=2) +
geom_line(data = model_shp, linetype="solid", aes(color= "Spherical"), size=0.8)+
geom_line(data = model_exp, linetype="dashed", aes(color= "Exponential"), size=0.8)+
geom_line(data = model_gau2, linetype="twodash", aes(color= "Gaussian"), size=0.8)+
labs(x="Distancia [m]",y="Gamma", title = "Modelo Semivariograma ",
subtitle="Modelo esférico, exponencial y gaussiano ajustado en el semivariograma residual omnidireccional
",
col="Model",shape='')+
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black") + scale_color_manual(name = "Theoretical Model",
values = c(Spherical= "blue", Exponential= "Red",Gaussian="green" )))
# Directional 135
vgm_135dir_resid = variogram(g_trend,alpha=c(135),tol.hor=22.5,
cutoff=30, width=15)
plot(vgm_135dir_resid)
#Spherical 135
vgm_residual.fit_sph_135 = fit.variogram(vgm_135dir_resid,
model = vgm(0.1,"Sph",100,0.5))
vgm_residual.fit_sph_135
plot(vgm_135dir_resid, vgm_residual.fit_sph_135, col="red")
#Esferico 135
vgm_residual.fit_sph_135 = fit.variogram(vgm_135dir_resid,
model = vgm(0.1,"Sph",100,0.5))
vgm_residual.fit_sph_135
plot(vgm_135dir_resid, vgm_residual.fit_sph_135, col="red")
cross_validation_sph =
krige.cv(Valor ~ Longitud+Latitud, locations = ndf2, model = vgm_residual.fit_sph)
summary(cross_validation_sph)
summary(cross_validation_sph$residual)
class(cross_validation_sph)
View(cross_validation_sph)
# validación cruzada exponencial omnidireccional
cross_validation_exp =
krige.cv(Valor ~ Longitud+Latitud, locations = ndf2, model = vgm_residual.fit_exp)
summary(cross_validation_exp$residual)
class(cross_validation_exp)
# validación cruzada gaussiana omnidireccional
cross_validation_gau =
krige.cv(Valor ~ Longitud+Latitud, locations = ndf2, model = vgm_residual.fit_gau2)
summary(cross_validation_gau$residual)
class(cross_validation_gau)
# validación cruzada gaussiana omnidireccional
cross_validation_gau =
krige.cv(Valor ~ Longitud+Latitud, locations = ndf2, model = vgm_residual.fit_gau2)
# validación cruzada esférica  grados
cross_validation_sph_135 =
krige.cv(Valor ~ Longitud+Latitud, locations = ndf2, model = vgm_residual.fit_sph_135)
summary(cross_validation_sph_135)
summary(cross_validation_sph_135$residual)
class(cross_validation_sph)
library(sf)
cross_validation_exp_2 = krige.cv(Valores ~ Longitud+Latitud, locations = ndf2,
model = vgm_residual.fit_exp)%>%st_as_sf()
cross_validation_exp_2 = krige.cv(Valor ~ Longitud+Latitud, locations = ndf2,
model = vgm_residual.fit_exp)%>%st_as_sf()
class(cross_validation_exp_2)
View(cross_validation_exp_2)
ggplot(as.data.frame(cross_validation_exp), aes(observed,var1.pred)) +
coord_fixed() + geom_abline(slope=1, col="red",size=1.2) +
geom_smooth(method = "lm", formula= y~x,size=1.2, col="black", se=F)+
geom_point(col = "blue") +
labs(x="observado", y="predecido", title = "Validacion cruzada") +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
ggplot(as.data.frame(cross_validation_exp), aes(residual)) +
geom_histogram(bins = 10, col=1, fill="grey") +
labs( x="residual", y= "frecuencia", title = "Histograma",
subtitle = "Valores residuales") + geom_vline(xintercept=0, col=2)+
theme(plot.title = element_text(face = "bold", size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
ggplot(as.data.frame(cross_validation_exp), aes(observed,residual)) +
coord_fixed() + geom_abline(slope=1, col="red",size=1.2) +
geom_smooth(method = "lm", formula= y~x,size=1.2, col="black", se=F)+
geom_point(col = "blue") +
labs(x="observado", y="residual", title = "Residual Vs Observado") +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
ggplot(data=cross_validation_exp_2, aes(sample=residual))+ stat_qq_line(col="red", size=1.2)+ stat_qq()+
labs(x="Teorico",y="muestra", title = "Normal Q-Q Plot",
subtitle="") +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
ggplot(data=cross_validation_exp_2, aes(sample=residual))+ stat_qq_line(col="red", size=1.2)+ stat_qq()+
labs(x="Teorico",y="muestra", title = "Grafico Q-Q ",
subtitle="") +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
# diferencia entre lo observado y lo previsto
bubble(cross_validation_exp, "residual",
main = "Validación cruzada Residuales modelo exponecial")
(UK.RMSE_shp=
sqrt(sum(cross_validation_sph$residual^2)/
(length(cross_validation_sph$residual))))
(UK.RMSE_exp=
sqrt(sum(cross_validation_exp$residual^2)/
(length(cross_validation_exp$residual))))
(UK.RMSE_gau=
sqrt(sum(cross_validation_gau$residual^2)/
(length(cross_validation_gau$residual))))
(UK.RMSE_exp_2=
sqrt(sum(cross_validation_sph_135$residual^2)/
(length(cross_validation_sph_135$residual))))
# diferencia entre lo observado y lo previsto
bubble(cross_validation_exp, "residual",
main = "Validación cruzada Residuales modelo exponecial")
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
ggplot(vgm2,aes(x=dist,y=gamma,col=factor(dir.hor),shape=factor(dir.hor))) +
geom_point(size=2) +
geom_line() +
labs(x="Distancia [m]",y="Gamma", title = "Semivariograma",
subtitle="Datos sin procesar - Semivariograma direccional",col="atzimut",shape='') +
geom_hline(aes(yintercept = var(ndf2$Valor), color="Variance"), linetype="dashed",
size=1) +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold"))+
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
#Distancias entre lso puntos
quantile(dist(ndf[,1:2]))
tabla1 <- read.csv("~/Proyectos/Taxis libres/Datasets/tabla1.csv")
View(tabla1)
quantile(dist(tabla1[,22:24]))
quantile(dist(tabla1[,22,24]))
p <- filter(ndf,ndf$Día=="Lunes")
View(p)
View(ndf)
p <- filter(Adf, ndf$Día == "Lunes")
p <- filter(Adf, Adf$Día == "Lunes")
View(p)
quantile(dist(p[,1:2]))
quantile(dist(tabla1[,22,24]))
p <- filter(tabla1, tabla1$IDCIUDAD == "11001")
quantile(dist(p[,1:2]))
View(p)
quantile(dist(p[,22:24]))
#creacion del grid
library(rgdal)
install.packages("rgdal")
#creacion del grid
library(rgdal)
library(maptools)
library(maptools)
coordinates(ndf2)= ~ Longitud-Latitud
coordinates(ndf2)= ~ Longitud+Latitud
s.range_1<- as.numeric(c(352473.45,352875.06))
voranoi_map_ggplot +
geom_voronoi(aes(fill=Localidad)) + geom_point(col="red")+ stat_voronoi(geom="path")
voronoi_map
x.range_1<- as.numeric(c(-74.22278, -74.00357))
y.range_1<- as.numeric(c(4.462181, 4.80202))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.5),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.5))
coordinates(grd)= ~ Longitud + Latitud
View(grd)
coordinates(grd)= ~ x + y
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.5),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.5))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.5),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.5))
View(grd)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.05),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.05))
View(grd)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.005),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.005))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.025),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.025))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.015),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.015))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.010),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.010))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.012),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.01))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.012),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.012))
coordinates(grd)= ~ x + y
griddf(as.data.frame(grd))
griddf=as.data.frame(grd)
ggplot()+geom_point(data=griddf, aes(x=x,y=y),shape=3,size=2)+
ggplot()+geom_point(data=griddf, aes(x=x,y=y),shape=3,size=2)+
geom_point(data = ndf, aes(x=x,y=y),color("red")+
labs(x="Este", y="Norte", title = "celdas Grid")+
them(plot.title = element_text(face = "bold",sieze = 20, hjust=0.5,
color = "black"))+
theme(axis.text = element_text(colour= "black",size = 10,face = "bold")))
gridded(grd) = TRUE
attach(Adf)
attach(ndf)
library(rgdal)
first_order = as.formula(Valor ~ Longitud+ Latitud )
model1 = lm(first_order, data=ndf)
fullgrid(grd) <- TRUE
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
summary(UK)
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.002),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.002))
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.002),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.002))
coordinates(grd)= ~ x + y
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.01),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.01))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.011),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.011))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.09),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.09))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.009),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.009))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.008),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.008))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0085),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0085))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0075),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0075))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0078))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0079),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00793),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00793))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00785),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00785))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00786),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00786))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00788),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00788))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0079),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0079),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0179),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0079),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.008),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.008),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.008))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0075),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0075))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0078))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00785),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00785))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.00784),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.00784))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0078))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0078555555))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0078))
coordinates(grd)= ~ x + y
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0077))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.0079))
grd = expand.grid(x = seq(from = x.range_1[1], to =x.range_1[2],by = 0.0078),
y = seq(from = y.range_1[1], to =y.range_1[2],by = 0.008))
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
coordinates(grd)= ~ x + y
# valores predichos y varianza (error de interpolación)
UK = krige(Valor~Longitud+Latitud, ndf2, grd, model=vgm_residual.fit_sph)
grid.arrange(Semivario1, pair_count, ncol = 1, heights = c(3, 1))
tabla1_mod <- read.csv("C:/Users/fagud/Downloads/tabla1_mod.csv")
View(tabla1_mod)
View(tabla1_mod)
#Distancias entre lso puntos
quantile(dist(ndf[,11,9]))
library(gridExtra)
require(devtools)
require(gstat)
require(sp)
require(sf)
require(ggplot2)
require(rgeos)
require(readxl)
library(nortest)
library(sp)
library(raster)
library(dismo)
library(ggvoronoi)
library(dplyr)
library(scatterplot3d)
library(rgl)
#Visualizar la tabla
View(tabla1_mod)
#Tipo de variable
class(tabla1_mod)
#Se realiza un backup
Adf=tabla1_mod
ndf=tabla1_mod
ndf2=tabla1_mod
#Tipo de variable
class(Adf)
class(ndf)
#Visualizar el nombre de la columnas
names(Adf)
names(ndf)
#Visualizar las 6 primeras filas de la tabla
head(Adf)
head(ndf)
#Visualizar algunas estadisticas con als varibles del dataset
summary(Adf)
summary(ndf)
#Distancias entre lso puntos
quantile(dist(ndf[,11,9]))
p <- filter(tabla1_mod, tabla1_mod$IDCIUDAD == "11001")
quantile(dist(tabla1[,22,24]))
ndf=tabla1_mod
#Distancias entre lso puntos
quantile(dist(ndf[,11,9]))
p <- filter(tabla1_mod, tabla1_mod$IDCIUDAD == "11001")
p <- filter(ndf, ndf$IDCIUDAD == "11001")
#Distancias entre lso puntos
quantile(dist(ndf[,11,9]))
View(ndf)
#Distancias entre lso puntos
p <- filter(ndf, ndf$IDCIUDAD != "11001")
quantile(dist(ndf[,11,9]))
#Distancias entre lso puntos
ndf <- filter(ndf, ndf$IDCIUDAD == "11001")
quantile(dist(ndf[,11,9]))
library(gridExtra)
require(devtools)
require(gstat)
require(sp)
require(sf)
require(ggplot2)
require(rgeos)
require(readxl)
library(nortest)
library(sp)
library(raster)
library(dismo)
library(ggvoronoi)
library(dplyr)
library(scatterplot3d)
library(rgl)
#Visualizar la tabla
View(tabla1_mod)
#Tipo de variable
class(tabla1_mod)
#Se realiza un backup
Adf=tabla1_mod
ndf=tabla1_mod
ndf2=tabla1_mod
class(ndf)
names(ndf)
head(ndf)
#Visualizar algunas estadisticas con als varibles del dataset
summary(ndf)
#Distancias entre lso puntos
ndf <- filter(ndf, ndf$IDCIUDAD == "11001")
quantile(dist(ndf[,11,9]))
quantile(dist(tabla1[,22,24]))
#Calcular el variograma
apply(ndf,2,var)
ggplot(ndf, aes(COSTO)) +
geom_histogram(aes(), bins = 19, col=1, fill=8, alpha=.5) +
labs(x="Localidades [n]",y="Count", title = "Histograma",
subtitle="Datos sin procesar") +
theme(plot.title = element_text( face = "bold",size = 20,hjust =0.5,
color = "black")) +
theme(axis.text = element_text(colour = "black", size =10, face = "bold")) +
theme(plot.subtitle=element_text(size=12, hjust=0.5, face="italic",
color="black"))
ggplot(Adf,aes(LONGITUD,LATITUD)) + geom_point(aes(size=LOCALIDAD), color= "blue" ,alpha=.8) +
labs(x="Este",y="Norte", title = "Servicios aceptados por dia [m]") +
theme(plot.title = element_text(face = "bold", size = 20,hjust =0.5,
color = "black")) +
theme (axis.text = element_text(colour = "black",size =10, face = "bold"))
ggplot(ndf,aes(LONGITUD,LATITUD)) + geom_point(aes(size=LOCALIDAD), color= "blue" ,alpha=.8) +
labs(x="Este",y="Norte", title = "Servicios aceptados por dia [m]") +
theme(plot.title = element_text(face = "bold", size = 20,hjust =0.5,
color = "black")) +
theme (axis.text = element_text(colour = "black",size =10, face = "bold"))
ggplot(ndf,aes(LONGITUD,LATITUD)) + geom_point(aes(col=LOCALIDAD), color= "blue" ,alpha=.8) +
labs(x="Este",y="Norte", title = "Servicios aceptados por dia [m]") +
theme(plot.title = element_text(face = "bold", size = 20,hjust =0.5,
color = "black")) +
theme (axis.text = element_text(colour = "black",size =10, face = "bold"))
size
